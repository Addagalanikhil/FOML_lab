import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression, LogisticRegression
from sklearn.preprocessing import PolynomialFeatures
from sklearn.metrics import accuracy_score, confusion_matrix
from sklearn.model_selection import train_test_split
import seaborn as sns

# Generating a synthetic dataset
np.random.seed(42)
hours_studied = np.random.rand(100, 1) * 10  # Study hours between 0 and 10
past_grades = np.random.rand(100, 1) * 100  # Past grades between 0 and 100
final_marks = 5 * hours_studied + 0.5 * past_grades + np.random.randn(100, 1) * 10  # Some linear relation + noise

# Convert final marks to binary (pass/fail) for logistic regression (threshold at 50)
passed = (final_marks > 50).astype(int)

# Creating DataFrame
data = pd.DataFrame({
    'Hours_Studied': hours_studied.flatten(),
    'Past_Grades': past_grades.flatten(),
    'Final_Marks': final_marks.flatten(),
    'Passed': passed.flatten()
})

# Display the first few rows
print(data.head())

# Linear Regression
X = data[['Hours_Studied', 'Past_Grades']]
y = data['Final_Marks']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
linear_reg = LinearRegression()
linear_reg.fit(X_train, y_train)
y_pred_linear = linear_reg.predict(X_test)
plt.scatter(y_test, y_pred_linear)
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], color='red')
plt.xlabel('Actual Marks')
plt.ylabel('Predicted Marks')
plt.title('Linear Regression: Actual vs Predicted Marks')
plt.show()

# Polynomial Regression
poly = PolynomialFeatures(degree=2)
X_poly = poly.fit_transform(X)
X_train_poly, X_test_poly, y_train_poly, y_test_poly = train_test_split(X_poly, y, test_size=0.2, random_state=42)
poly_reg = LinearRegression()
poly_reg.fit(X_train_poly, y_train_poly)
y_pred_poly = poly_reg.predict(X_test_poly)
plt.scatter(y_test_poly, y_pred_poly)
plt.plot([min(y_test_poly), max(y_test_poly)], [min(y_test_poly), max(y_test_poly)], color='red')
plt.xlabel('Actual Marks')
plt.ylabel('Predicted Marks')
plt.title('Polynomial Regression: Actual vs Predicted Marks')
plt.show()

# Logistic Regression
y_binary = data['Passed']
X_train, X_test, y_train, y_test = train_test_split(X, y_binary, test_size=0.2, random_state=42)
logistic_reg = LogisticRegression()
logistic_reg.fit(X_train, y_train)
y_pred_logistic = logistic_reg.predict(X_test)
accuracy = accuracy_score(y_test, y_pred_logistic)
conf_matrix = confusion_matrix(y_test, y_pred_logistic)
print("Accuracy:", accuracy)
print("Confusion Matrix:")
print(conf_matrix)
plt.figure(figsize=(8, 6))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=['Fail', 'Pass'], yticklabels=['Fail', 'Pass'])
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Logistic Regression Confusion Matrix')
plt.show()
