import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import confusion_matrix, accuracy_score

# Generate synthetic student dataset
np.random.seed(42)
num_students = 100

# Random marks between 0 and 100 for three subjects
marks1 = np.random.randint(0, 101, num_students)
marks2 = np.random.randint(0, 101, num_students)
marks3 = np.random.randint(0, 101, num_students)

# Calculate total and average marks
total_marks = marks1 + marks2 + marks3
average_marks = total_marks / 3

# Determine pass/fail based on average marks
# Assume pass if average mark is 40 or above
labels = (average_marks >= 40).astype(int)  # 1 for pass, 0 for fail

# Create a DataFrame
data = pd.DataFrame({
    'Marks1': marks1,
    'Marks2': marks2,
    'Marks3': marks3,
    'TotalMarks': total_marks,
    'AverageMarks': average_marks,
    'Label': labels
})

# Define features and target
X = data[['Marks1', 'Marks2', 'Marks3', 'TotalMarks', 'AverageMarks']]
y = data['Label']

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Gaussian Naive Bayes classifier
gnb = GaussianNB()

# Fit the model using the training data
gnb.fit(X_train, y_train)

# Predict the labels for the test data
y_pred = gnb.predict(X_test)

# Calculate the confusion matrix
cm = confusion_matrix(y_test, y_pred)
print("Confusion Matrix:")
print(cm)

# Calculate the accuracy
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)
